{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Ypy-websocket is a Python library for building WebSocket servers and clients that connect shared documents.</p> <p>It can be used to create collaborative web applications.</p>"},{"location":"install/","title":"Install","text":"<p>Ypy-websocket can be installed from PyPI using <code>pip</code> or from conda-forge using <code>micromamba</code>.</p>"},{"location":"install/#with-pip","title":"With <code>pip</code>","text":"<pre><code>pip install ypy-websocket\n</code></pre>"},{"location":"install/#with-micromamba","title":"With <code>micromamba</code>","text":"<pre><code>micromamba install -c conda-forge ypy-websocket\n</code></pre>"},{"location":"usage/WebSocket_API/","title":"WebSocket API","text":"<p>The WebSocket object passed to <code>WebsocketProvider</code> and <code>WebsocketServer.serve</code> must respect the following API:</p> <pre><code>class WebSocket:\n\n    @property\n    def path(self) -&gt; str:\n        # can be e.g. the URL path\n        # or a room identifier\n        return \"my-roomname\"\n\n    def __aiter__(self):\n        return self\n\n    async def __anext__(self) -&gt; bytes:\n        # async iterator for receiving messages\n        # until the connection is closed\n        try:\n            message = await self.recv()\n        except Exception:\n            raise StopAsyncIteration()\n\n        return message\n\n    async def send(self, message: bytes):\n        # send message\n        pass\n\n    async def recv(self) -&gt; bytes:\n        # receive message\n        return b\"\"\n</code></pre>"},{"location":"usage/client/","title":"Client","text":"<p>Here is a code example: <pre><code>import asyncio\nimport y_py as Y\nfrom websockets import connect\nfrom ypy_websocket import WebsocketProvider\n\nasync def client():\n    ydoc = Y.YDoc()\n    async with (\n        connect(\"ws://localhost:1234/my-roomname\") as websocket,\n        WebsocketProvider(ydoc, websocket),\n    ):\n        # Changes to remote ydoc are applied to local ydoc.\n        # Changes to local ydoc are sent over the WebSocket and\n        # broadcast to all clients.\n        ymap = ydoc.get_map(\"map\")\n        with ydoc.begin_transaction() as t:\n            ymap.set(t, \"key\", \"value\")\n\nasyncio.run(client())\n</code></pre></p>"},{"location":"usage/server/","title":"Server","text":"<p>Here is a code example using the websockets library: <pre><code>import asyncio\nfrom websockets import serve\nfrom ypy_websocket import WebsocketServer\n\nasync def server():\n    async with (\n        WebsocketServer() as websocket_server,\n        serve(websocket_server.serve, \"localhost\", 1234),\n    ):\n        await asyncio.Future()  # run forever\n\nasyncio.run(server())\n</code></pre> Ypy-websocket can also be used with an ASGI server. Here is a code example using Uvicorn: <pre><code># main.py\nimport asyncio\nimport uvicorn\nfrom ypy_websocket import ASGIServer, WebsocketServer\n\nwebsocket_server = WebsocketServer()\napp = ASGIServer(websocket_server)\n\nasync def main():\n    config = uvicorn.Config(\"main:app\", port=5000, log_level=\"info\")\n    server = uvicorn.Server(config)\n    async with websocket_server:\n        task = asyncio.create_task(server.serve())\n        while not server.started:\n            await asyncio.sleep(0)\n\n        await asyncio.Future()  # run forever\n\nasyncio.run(main())\n</code></pre></p>"}]}